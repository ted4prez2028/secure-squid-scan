
// Comprehensive vulnerability definitions based on OWASP Top 10 and common web security issues
export interface VulnerabilityDefinition {
  id: string;
  name: string;
  description: string;
  category: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  cwe: string; // Common Weakness Enumeration ID
  remediation: string;
  references: {
    title: string;
    url: string;
  }[];
}

export const vulnerabilityDefinitions: VulnerabilityDefinition[] = [
  {
    id: "A01:2021",
    name: "Broken Access Control",
    description: "Restrictions on what authenticated users are allowed to do are often not properly enforced. Attackers can exploit these flaws to access unauthorized functionality and/or data.",
    category: "Access Control",
    severity: "critical",
    cwe: "CWE-284",
    remediation: "Implement proper access controls with a deny-by-default policy. Use role-based access control and enforce record ownership.",
    references: [
      {
        title: "OWASP Broken Access Control",
        url: "https://owasp.org/Top10/A01_2021-Broken_Access_Control/"
      }
    ]
  },
  {
    id: "A02:2021",
    name: "Cryptographic Failures",
    description: "Failures related to cryptography that often lead to sensitive data exposure or system compromise.",
    category: "Cryptography",
    severity: "high",
    cwe: "CWE-310",
    remediation: "Encrypt all sensitive data at rest and in transit. Don't store sensitive data unnecessarily and discard it as soon as possible.",
    references: [
      {
        title: "OWASP Cryptographic Failures",
        url: "https://owasp.org/Top10/A02_2021-Cryptographic_Failures/"
      }
    ]
  },
  {
    id: "A03:2021",
    name: "Injection",
    description: "Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query.",
    category: "Injection",
    severity: "critical",
    cwe: "CWE-77",
    remediation: "Use a safe API that avoids the use of interpreters. Use positive server-side input validation and parameterized queries.",
    references: [
      {
        title: "OWASP Injection",
        url: "https://owasp.org/Top10/A03_2021-Injection/"
      }
    ]
  },
  {
    id: "A04:2021",
    name: "Insecure Design",
    description: "Insecure design refers to weaknesses in the design that cannot be fixed by proper implementation.",
    category: "Design",
    severity: "high",
    cwe: "CWE-1173",
    remediation: "Establish and use a secure development lifecycle including threat modeling and security requirements.",
    references: [
      {
        title: "OWASP Insecure Design",
        url: "https://owasp.org/Top10/A04_2021-Insecure_Design/"
      }
    ]
  },
  {
    id: "A05:2021",
    name: "Security Misconfiguration",
    description: "Security misconfiguration is the most commonly seen issue, often resulting from insecure default configurations or incomplete configurations.",
    category: "Configuration",
    severity: "medium",
    cwe: "CWE-1032",
    remediation: "Implement a repeatable hardening process, review and update configurations across the entire application stack, and maintain minimal components.",
    references: [
      {
        title: "OWASP Security Misconfiguration",
        url: "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"
      }
    ]
  },
  {
    id: "A06:2021",
    name: "Vulnerable and Outdated Components",
    description: "Using components with known vulnerabilities can undermine application defenses and enable various attacks.",
    category: "Dependencies",
    severity: "medium",
    cwe: "CWE-1035",
    remediation: "Remove unused dependencies, components, files, and features. Continuously inventory all components and monitor sources like CVE for vulnerabilities.",
    references: [
      {
        title: "OWASP Vulnerable and Outdated Components",
        url: "https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/"
      }
    ]
  },
  {
    id: "A07:2021",
    name: "Identification and Authentication Failures",
    description: "Authentication and session management weaknesses that allow attackers to assume other users' identities temporarily or permanently.",
    category: "Authentication",
    severity: "high",
    cwe: "CWE-287",
    remediation: "Implement multi-factor authentication, limit or increasingly delay failed login attempts, and use a server-side secure session manager.",
    references: [
      {
        title: "OWASP Identification and Authentication Failures",
        url: "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"
      }
    ]
  },
  {
    id: "A08:2021",
    name: "Software and Data Integrity Failures",
    description: "Software and data integrity failures relate to assumptions around software updates or critical data without verification.",
    category: "Integrity",
    severity: "high",
    cwe: "CWE-494",
    remediation: "Use digital signatures to verify software or data is from the expected source and has not been altered.",
    references: [
      {
        title: "OWASP Software and Data Integrity Failures",
        url: "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
      }
    ]
  },
  {
    id: "A09:2021",
    name: "Security Logging and Monitoring Failures",
    description: "Insufficient logging and monitoring, coupled with missing or ineffective integration with incident response, allow attackers to persist and pivot to more systems.",
    category: "Logging",
    severity: "medium",
    cwe: "CWE-778",
    remediation: "Ensure all login, access control, and server-side input validation failures are logged with sufficient context for suspicious activity identification.",
    references: [
      {
        title: "OWASP Security Logging and Monitoring Failures",
        url: "https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"
      }
    ]
  },
  {
    id: "A10:2021",
    name: "Server-Side Request Forgery",
    description: "SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL.",
    category: "API",
    severity: "high",
    cwe: "CWE-918",
    remediation: "Sanitize and validate all client-supplied input data. Enforce URL schema, port, and destination using a positive allow list.",
    references: [
      {
        title: "OWASP Server-Side Request Forgery",
        url: "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/"
      }
    ]
  },
  {
    id: "XSS",
    name: "Cross-Site Scripting (XSS)",
    description: "XSS flaws occur when an application includes untrusted data in a new web page without proper validation or escaping.",
    category: "Injection",
    severity: "high",
    cwe: "CWE-79",
    remediation: "Use frameworks that automatically escape XSS by design. Escape untrusted HTTP request data based on the context in the HTML output.",
    references: [
      {
        title: "OWASP XSS Prevention",
        url: "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
      }
    ]
  },
  {
    id: "CSRF",
    name: "Cross-Site Request Forgery",
    description: "CSRF attacks force authenticated users to submit a request to a web application against which they are currently authenticated.",
    category: "Authentication",
    severity: "medium",
    cwe: "CWE-352",
    remediation: "Implement anti-CSRF tokens. Use the SameSite cookie attribute. Check the standard Referer header.",
    references: [
      {
        title: "OWASP CSRF Prevention",
        url: "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
      }
    ]
  }
];

// Function to get vulnerability details by ID
export function getVulnerabilityById(id: string): VulnerabilityDefinition | undefined {
  return vulnerabilityDefinitions.find(vuln => vuln.id === id);
}

// Function to get vulnerability details by name
export function getVulnerabilityByName(name: string): VulnerabilityDefinition | undefined {
  return vulnerabilityDefinitions.find(vuln => 
    vuln.name.toLowerCase() === name.toLowerCase() || 
    vuln.name.toLowerCase().includes(name.toLowerCase())
  );
}
